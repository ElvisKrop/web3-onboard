import{S as ce,i as ie,s as De,e as A,t as p,k as h,w as i,c as u,a as w,h as r,d as e,m as $,x as D,b,aa as oe,f as te,g as o,M as c,y as F,q as y,o as d,B as f,E as re}from"../../chunks/index-4af071d0.js";import"../../chunks/scroll-9ce8c56b.js";import{C as Ps}from"../../chunks/CodeFence-7c02fe57.js";import{C as k}from"../../chunks/CodeInline-7947d9bd.js";import{L as K}from"../../chunks/Link-5aa5b43b.js";/* empty css                                                         */import{T as Fe,a as pe}from"../../chunks/Tabs-6a4561b3.js";import"../../chunks/ThemeCustomizer.svelte_svelte_type_style_lang-d7bad545.js";import"@web3-onboard/gas";import"@web3-onboard/core";import"@web3-onboard/injected-wallets";import"../../chunks/singletons-13ae2ec1.js";import"../../chunks/contexts-e4ffdb2f.js";var ye="/_app/immutable/assets/uniswap-example-3d42f47c.mp4";function de(C){let n;return{c(){n=p("Uniswap Widget")},l(a){n=r(a,"Uniswap Widget")},m(a,t){o(a,n,t)},d(a){a&&e(n)}}}function fe(C){let n;return{c(){n=p("#")},l(a){n=r(a,"#")},m(a,t){o(a,n,t)},d(a){a&&e(n)}}}function Ce(C){let n,a;return n=new Ps({props:{lang:"bash",ext:"sh",linesCount:2,rawCode:`yarn add @web3-onboard/react @web3-onboard/injected-wallets
`,showCopyCode:!0,code:`<pre><code><span class="line"><span style="color: #A6ACCD">yarn add @web3-onboard/react @web3-onboard/injected-wallets</span></span>
<span class="line"></span></code></pre>`}}),{c(){i(n.$$.fragment)},l(t){D(n.$$.fragment,t)},m(t,v){F(n,t,v),a=!0},p:re,i(t){a||(y(n.$$.fragment,t),a=!0)},o(t){d(n.$$.fragment,t),a=!1},d(t){f(n,t)}}}function Ae(C){let n,a;return n=new Ps({props:{lang:"bash",ext:"sh",linesCount:2,rawCode:`npm install @web3-onboard/react @web3-onboard/injected-wallets
`,showCopyCode:!0,code:`<pre><code><span class="line"><span style="color: #A6ACCD">npm install @web3-onboard/react @web3-onboard/injected-wallets</span></span>
<span class="line"></span></code></pre>`}}),{c(){i(n.$$.fragment)},l(t){D(n.$$.fragment,t)},m(t,v){F(n,t,v),a=!0},p:re,i(t){a||(y(n.$$.fragment,t),a=!0)},o(t){d(n.$$.fragment,t),a=!1},d(t){f(n,t)}}}function ue(C){let n,a,t,v;return n=new pe({props:{value:"yarn",$$slots:{default:[Ce]},$$scope:{ctx:C}}}),t=new pe({props:{value:"npm",$$slots:{default:[Ae]},$$scope:{ctx:C}}}),{c(){i(n.$$.fragment),a=h(),i(t.$$.fragment)},l(m){D(n.$$.fragment,m),a=$(m),D(t.$$.fragment,m)},m(m,E){F(n,m,E),o(m,a,E),F(t,m,E),v=!0},p(m,E){const gs={};E&2&&(gs.$$scope={dirty:E,ctx:m}),n.$set(gs);const x={};E&2&&(x.$$scope={dirty:E,ctx:m}),t.$set(x)},i(m){v||(y(n.$$.fragment,m),y(t.$$.fragment,m),v=!0)},o(m){d(n.$$.fragment,m),d(t.$$.fragment,m),v=!1},d(m){f(n,m),m&&e(a),f(t,m)}}}function me(C){let n;return{c(){n=p("#")},l(a){n=r(a,"#")},m(a,t){o(a,n,t)},d(a){a&&e(n)}}}function we(C){let n;return{c(){n=p("#")},l(a){n=r(a,"#")},m(a,t){o(a,n,t)},d(a){a&&e(n)}}}function he(C){let n;return{c(){n=p("#")},l(a){n=r(a,"#")},m(a,t){o(a,n,t)},d(a){a&&e(n)}}}function $e(C){let n;return{c(){n=p("the api reference")},l(a){n=r(a,"the api reference")},m(a,t){o(a,n,t)},d(a){a&&e(n)}}}function be(C){let n;return{c(){n=p("#")},l(a){n=r(a,"#")},m(a,t){o(a,n,t)},d(a){a&&e(n)}}}function ge(C){let n;return{c(){n=p("#")},l(a){n=r(a,"#")},m(a,t){o(a,n,t)},d(a){a&&e(n)}}}function ve(C){let n;return{c(){n=p("#")},l(a){n=r(a,"#")},m(a,t){o(a,n,t)},d(a){a&&e(n)}}}function Ee(C){let n,a,t,v,m,E,gs,x,cn,Ns,O,J,Dn,Hs,vs,Fn,qs,V,Ys,R,G,yn,zs,Es,dn,Ks,B,fn,ls,Cn,os,An,Js,ts,M,Q,un,Vs,T,mn,ps,wn,rs,hn,Gs,cs,j,X,$n,Qs,Z,bn,is,gn,Xs,U,Os,vn,En,Rs,_n,kn,Ms,xn,Zs,I,Wn,Ds,Sn,ss,Bn,sn,g,Tn,Fs,Un,ys,In,ds,Pn,fs,On,Cs,Rn,As,Mn,us,jn,nn,ms,L,ns,Ln,en,P,Nn,ws,Hn,hs,qn,an,$s,N,es,Yn,ln,W,_s,Zn,zn,on,H,as,Kn,tn,ks,Jn,pn,S,se,rn;return E=new k({props:{code:"@web3-onboard"}}),x=new K({props:{href:"https://docs.uniswap.org/sdk/widgets/swap-widget",target:"_blank",rel:"noopener noreferrer",$$slots:{default:[de]},$$scope:{ctx:C}}}),J=new K({props:{class:"header-anchor",href:"#step-1-install","aria-hidden":"true",$$slots:{default:[fe]},$$scope:{ctx:C}}}),V=new Fe({props:{values:C[0],$$slots:{default:[ue]},$$scope:{ctx:C}}}),G=new K({props:{class:"header-anchor",href:"#step-2-import-configure","aria-hidden":"true",$$slots:{default:[me]},$$scope:{ctx:C}}}),ls=new k({props:{code:"web3-onboard.ts"}}),os=new k({props:{code:"web3-onboard"}}),ts=new Ps({props:{title:"web3-onboard.ts",lang:"typescript",ext:"ts",linesCount:41,rawCode:`import { init } from '@web3-onboard/react'
import injectedModule from '@web3-onboard/injected-wallets'

const INFURA_KEY = ''

const ethereumRopsten = {
  id: '0x3',
  token: 'rETH',
  label: 'Ethereum Ropsten',
  rpcUrl: \`https://ropsten.infura.io/v3/\${INFURA_KEY}\`,
}

const polygonMainnet = {
  id: '0x89',
  token: 'MATIC',
  label: 'Polygon',
  rpcUrl: 'https://matic-mainnet.chainstacklabs.com',
}

const chains = [ethereumRopsten, polygonMainnet]

const wallets = [injectedModule()]

const appMetadata = {
  name: 'Uniswap Widget Example',
  icon: '<svg>My App Icon</svg>',
  description:
    'Example showcasing how to integrate web3-onboard with uniswap widget.',
  recommendedInjectedWallets: [
    { name: 'MetaMask', url: 'https://metamask.io' },
    { name: 'Coinbase', url: 'https://wallet.coinbase.com/' },
  ],
}

// initialize and export Onboard
export default init({
  wallets,
  chains,
  appMetadata,
})
`,showCopyCode:!0,code:`<pre><code><span class="line"><span style="color: #89DDFF; font-style: italic">import</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">init</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">from</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">@web3-onboard/react</span><span style="color: #89DDFF">&#39;</span></span>
<span class="line"><span style="color: #89DDFF; font-style: italic">import</span><span style="color: #A6ACCD"> injectedModule </span><span style="color: #89DDFF; font-style: italic">from</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">@web3-onboard/injected-wallets</span><span style="color: #89DDFF">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> INFURA_KEY </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> ethereumRopsten </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">id</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">0x3</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">token</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">rETH</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">label</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">Ethereum Ropsten</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">rpcUrl</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">\`</span><span style="color: #C3E88D">https://ropsten.infura.io/v3/</span><span style="color: #89DDFF">\${</span><span style="color: #A6ACCD">INFURA_KEY</span><span style="color: #89DDFF">}\`</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> polygonMainnet </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">id</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">0x89</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">token</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">MATIC</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">label</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">Polygon</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">rpcUrl</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">https://matic-mainnet.chainstacklabs.com</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> chains </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> [ethereumRopsten</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> polygonMainnet]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> wallets </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> [</span><span style="color: #82AAFF">injectedModule</span><span style="color: #A6ACCD">()]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> appMetadata </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">name</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">Uniswap Widget Example</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">icon</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">&lt;svg&gt;My App Icon&lt;/svg&gt;</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">description</span><span style="color: #89DDFF">:</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">Example showcasing how to integrate web3-onboard with uniswap widget.</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">recommendedInjectedWallets</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> [</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">name</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">MetaMask</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">url</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">https://metamask.io</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">},</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">name</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">Coinbase</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">url</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">https://wallet.coinbase.com/</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">},</span></span>
<span class="line"><span style="color: #A6ACCD">  ]</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #464B5D; font-style: italic">// initialize and export Onboard</span></span>
<span class="line"><span style="color: #89DDFF; font-style: italic">export</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">default</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">init</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  wallets</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  chains</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  appMetadata</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span></span>
<span class="line"></span></code></pre>`}}),Q=new K({props:{class:"header-anchor",href:"#step-3-add-the-react-hooks","aria-hidden":"true",$$slots:{default:[we]},$$scope:{ctx:C}}}),ps=new k({props:{code:"App"}}),rs=new k({props:{code:"useConnectWallet"}}),cs=new Ps({props:{title:"App.tsx",lang:"tsx",ext:"tsx",linesCount:35,rawCode:`import { useState, useEffect } from 'react'

import { ethers } from 'ethers'
import { useConnectWallet } from '@web3-onboard/react'

export default function App() {

  const [{ wallet, connecting }, connect, disconnect] = useConnectWallet()
  const [provider, setProvider] = useState<ethers.providers.Web3Provider>()

  // Once the wallet is connected the provider will be defined and we'll set the provider value
  // This provider will then be passed to the Uniswap component in the next step.
  useEffect(() => {
    if (wallet?.provider) {
      setProvider(new ethers.providers.Web3Provider(wallet.provider, 'any'))
    } else {
      // Reset the provider back to 'undefined' such that the 
      // connect wallet option will reappear in the uniswap modal
      setProvider(undefined)
    }
  }, [wallet])

  // The connect wallet function which will be based to the Uniswap component in the next step.
  const connectWallet = () => {
    connect()
  }

  return (
    <main>
      <h1>Uniswap Swap Widget</h1>
      // Uniswap widget will go here
    </main>
  )
}
`,showCopyCode:!0,code:`<pre><code><span class="line"><span style="color: #89DDFF; font-style: italic">import</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">useState</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">useEffect</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">from</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">react</span><span style="color: #89DDFF">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF; font-style: italic">import</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">ethers</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">from</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">ethers</span><span style="color: #89DDFF">&#39;</span></span>
<span class="line"><span style="color: #89DDFF; font-style: italic">import</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">useConnectWallet</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">from</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">@web3-onboard/react</span><span style="color: #89DDFF">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF; font-style: italic">export</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">default</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">App</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #89DDFF">[{</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">wallet</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">connecting</span><span style="color: #F07178"> </span><span style="color: #89DDFF">},</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">connect</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">disconnect</span><span style="color: #89DDFF">]</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">useConnectWallet</span><span style="color: #F07178">()</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #89DDFF">[</span><span style="color: #A6ACCD">provider</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">setProvider</span><span style="color: #89DDFF">]</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">useState</span><span style="color: #89DDFF">&lt;</span><span style="color: #FFCB6B">ethers</span><span style="color: #89DDFF">.</span><span style="color: #FFCB6B">providers</span><span style="color: #89DDFF">.</span><span style="color: #FFCB6B">Web3Provider</span><span style="color: #89DDFF">&gt;</span><span style="color: #F07178">()</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #464B5D; font-style: italic">// Once the wallet is connected the provider will be defined and we&#39;ll set the provider value</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #464B5D; font-style: italic">// This provider will then be passed to the Uniswap component in the next step.</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #82AAFF">useEffect</span><span style="color: #F07178">(</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">wallet</span><span style="color: #89DDFF">?.</span><span style="color: #A6ACCD">provider</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">setProvider</span><span style="color: #F07178">(</span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">ethers</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">providers</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">Web3Provider</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">wallet</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">provider</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">any</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">))</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #464B5D; font-style: italic">// Reset the provider back to &#39;undefined&#39; such that the </span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #464B5D; font-style: italic">// connect wallet option will reappear in the uniswap modal</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">setProvider</span><span style="color: #F07178">(</span><span style="color: #89DDFF">undefined</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">},</span><span style="color: #F07178"> [</span><span style="color: #A6ACCD">wallet</span><span style="color: #F07178">])</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #464B5D; font-style: italic">// The connect wallet function which will be based to the Uniswap component in the next step.</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">connectWallet</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">connect</span><span style="color: #F07178">()</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> (</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">main</span><span style="color: #89DDFF">&gt;</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">h1</span><span style="color: #89DDFF">&gt;</span><span style="color: #A6ACCD">Uniswap Swap Widget</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">h1</span><span style="color: #89DDFF">&gt;</span></span>
<span class="line"><span style="color: #A6ACCD">      // Uniswap widget will go here</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">main</span><span style="color: #89DDFF">&gt;</span></span>
<span class="line"><span style="color: #F07178">  )</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span></code></pre>`}}),X=new K({props:{class:"header-anchor",href:"#step-4-add-the-uniswap-widget","aria-hidden":"true",$$slots:{default:[he]},$$scope:{ctx:C}}}),is=new k({props:{code:"SwapWidget"}}),Ds=new k({props:{code:"SwapWidget"}}),ss=new K({props:{href:"https://docs.uniswap.org/sdk/widgets/swap-widget/api",target:"_blank",rel:"noopener noreferrer",$$slots:{default:[$e]},$$scope:{ctx:C}}}),Fs=new k({props:{code:"connectWallet"}}),ys=new k({props:{code:"onConnectWallet"}}),ds=new k({props:{code:"SwapWidget"}}),fs=new k({props:{code:"SwapWidget"}}),Cs=new k({props:{code:"provider"}}),As=new k({props:{code:"provider"}}),us=new k({props:{code:"SwapWidget"}}),ms=new Ps({props:{title:"App.tsx",lang:"tsx",ext:"tsx",linesCount:62,highlightLines:[[6,13],[40,58]],rawCode:`import { useState, useEffect } from 'react'

import { ethers } from 'ethers'
import { useConnectWallet } from '@web3-onboard/react'

import { SwapWidget } from '@uniswap/widgets'
import '@uniswap/widgets/fonts.css'

const JSON_RPC_URL = 'https://cloudflare-eth.com'
// The url of the default uniswap token list. This list will be passed to the Uniswap component
// and will appear by default in the token selector UI.
const TOKEN_LIST = 'https://gateway.ipfs.io/ipns/tokens.uniswap.org'
const UNI = '0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984'

export default function App() {

  const [{ wallet, connecting }, connect, disconnect] = useConnectWallet()
  const [provider, setProvider] = useState<ethers.providers.Web3Provider>()

  // Once the wallet is connected the provider will be defined and we'll set the provider value
  // This provider will then be passed to the Uniswap component below.
  useEffect(() => {
    if (wallet?.provider) {
      setProvider(new ethers.providers.Web3Provider(wallet.provider, 'any'))
    } else {
      // Reset the provider back to 'undefined' such that the 
      // connect wallet option will reappear in the uniswap modal
      setProvider(undefined)
    }
  }, [wallet])

  // The connect wallet function which will be based to the Uniswap component below.
  const connectWallet = () => {
    connect()
  }

  return (
    <main>
      <h1>Uniswap Swap Widget</h1>
      <SwapWidget
        jsonRpcEndpoint={JSON_RPC_URL}
        // Specifies the set of tokens that appear by default in the token selector list.
        tokenList={TOKEN_LIST}
        // This is the provider that we receive from the user's connected wallet
        provider={provider}
        // When the Uniswap connect wallet button gets hit
        // the function gets called. We'll hook this up to 
        // our connect wallet method from web3-onboard.
        onConnectWallet={connectWallet}
        // Address of the token to be selected by default in the 
        // input field (e.g. USDC) for each network chain ID.
        defaultInputTokenAddress="NATIVE"
        // Default amount for the input field in this case 1 ETH
        defaultInputAmount="1"
        // Address of the token to be selected by default in the input field (e.g. USDC) 
        // for each network chain ID.
        defaultOutputTokenAddress={UNI}
      />
    </main>
  )
}
`,showCopyCode:!0,code:`<pre><code><span class="line"><span style="color: #89DDFF; font-style: italic">import</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">useState</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">useEffect</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">from</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">react</span><span style="color: #89DDFF">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF; font-style: italic">import</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">ethers</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">from</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">ethers</span><span style="color: #89DDFF">&#39;</span></span>
<span class="line"><span style="color: #89DDFF; font-style: italic">import</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">useConnectWallet</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">from</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">@web3-onboard/react</span><span style="color: #89DDFF">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF; font-style: italic">import</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">SwapWidget</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">from</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">@uniswap/widgets</span><span style="color: #89DDFF">&#39;</span></span>
<span class="line"><span style="color: #89DDFF; font-style: italic">import</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">@uniswap/widgets/fonts.css</span><span style="color: #89DDFF">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> JSON_RPC_URL </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">https://cloudflare-eth.com</span><span style="color: #89DDFF">&#39;</span></span>
<span class="line"><span style="color: #464B5D; font-style: italic">// The url of the default uniswap token list. This list will be passed to the Uniswap component</span></span>
<span class="line"><span style="color: #464B5D; font-style: italic">// and will appear by default in the token selector UI.</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> TOKEN_LIST </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">https://gateway.ipfs.io/ipns/tokens.uniswap.org</span><span style="color: #89DDFF">&#39;</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> UNI </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984</span><span style="color: #89DDFF">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF; font-style: italic">export</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">default</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">App</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #89DDFF">[{</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">wallet</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">connecting</span><span style="color: #F07178"> </span><span style="color: #89DDFF">},</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">connect</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">disconnect</span><span style="color: #89DDFF">]</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">useConnectWallet</span><span style="color: #F07178">()</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #89DDFF">[</span><span style="color: #A6ACCD">provider</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">setProvider</span><span style="color: #89DDFF">]</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">useState</span><span style="color: #89DDFF">&lt;</span><span style="color: #FFCB6B">ethers</span><span style="color: #89DDFF">.</span><span style="color: #FFCB6B">providers</span><span style="color: #89DDFF">.</span><span style="color: #FFCB6B">Web3Provider</span><span style="color: #89DDFF">&gt;</span><span style="color: #F07178">()</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #464B5D; font-style: italic">// Once the wallet is connected the provider will be defined and we&#39;ll set the provider value</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #464B5D; font-style: italic">// This provider will then be passed to the Uniswap component below.</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #82AAFF">useEffect</span><span style="color: #F07178">(</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">wallet</span><span style="color: #89DDFF">?.</span><span style="color: #A6ACCD">provider</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">setProvider</span><span style="color: #F07178">(</span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">ethers</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">providers</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">Web3Provider</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">wallet</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">provider</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">any</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">))</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #464B5D; font-style: italic">// Reset the provider back to &#39;undefined&#39; such that the </span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #464B5D; font-style: italic">// connect wallet option will reappear in the uniswap modal</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">setProvider</span><span style="color: #F07178">(</span><span style="color: #89DDFF">undefined</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">},</span><span style="color: #F07178"> [</span><span style="color: #A6ACCD">wallet</span><span style="color: #F07178">])</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #464B5D; font-style: italic">// The connect wallet function which will be based to the Uniswap component below.</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">connectWallet</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">connect</span><span style="color: #F07178">()</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> (</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">main</span><span style="color: #89DDFF">&gt;</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">h1</span><span style="color: #89DDFF">&gt;</span><span style="color: #A6ACCD">Uniswap Swap Widget</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">h1</span><span style="color: #89DDFF">&gt;</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #89DDFF">&lt;</span><span style="color: #FFCB6B">SwapWidget</span></span>
<span class="line"><span style="color: #89DDFF">        </span><span style="color: #C792EA">jsonRpcEndpoint</span><span style="color: #89DDFF">={</span><span style="color: #A6ACCD">JSON_RPC_URL</span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">        </span><span style="color: #464B5D; font-style: italic">// Specifies the set of tokens that appear by default in the token selector list.</span></span>
<span class="line"><span style="color: #89DDFF">        </span><span style="color: #C792EA">tokenList</span><span style="color: #89DDFF">={</span><span style="color: #A6ACCD">TOKEN_LIST</span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">        </span><span style="color: #464B5D; font-style: italic">// This is the provider that we receive from the user&#39;s connected wallet</span></span>
<span class="line"><span style="color: #89DDFF">        </span><span style="color: #C792EA">provider</span><span style="color: #89DDFF">={</span><span style="color: #A6ACCD">provider</span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">        </span><span style="color: #464B5D; font-style: italic">// When the Uniswap connect wallet button gets hit</span></span>
<span class="line"><span style="color: #89DDFF">        </span><span style="color: #464B5D; font-style: italic">// the function gets called. We&#39;ll hook this up to </span></span>
<span class="line"><span style="color: #89DDFF">        </span><span style="color: #464B5D; font-style: italic">// our connect wallet method from web3-onboard.</span></span>
<span class="line"><span style="color: #89DDFF">        </span><span style="color: #C792EA">onConnectWallet</span><span style="color: #89DDFF">={</span><span style="color: #A6ACCD">connectWallet</span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">        </span><span style="color: #464B5D; font-style: italic">// Address of the token to be selected by default in the </span></span>
<span class="line"><span style="color: #89DDFF">        </span><span style="color: #464B5D; font-style: italic">// input field (e.g. USDC) for each network chain ID.</span></span>
<span class="line"><span style="color: #89DDFF">        </span><span style="color: #C792EA">defaultInputTokenAddress</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">NATIVE</span><span style="color: #89DDFF">&quot;</span></span>
<span class="line"><span style="color: #89DDFF">        </span><span style="color: #464B5D; font-style: italic">// Default amount for the input field in this case 1 ETH</span></span>
<span class="line"><span style="color: #89DDFF">        </span><span style="color: #C792EA">defaultInputAmount</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">1</span><span style="color: #89DDFF">&quot;</span></span>
<span class="line"><span style="color: #89DDFF">        </span><span style="color: #464B5D; font-style: italic">// Address of the token to be selected by default in the input field (e.g. USDC) </span></span>
<span class="line"><span style="color: #89DDFF">        </span><span style="color: #464B5D; font-style: italic">// for each network chain ID.</span></span>
<span class="line"><span style="color: #89DDFF">        </span><span style="color: #C792EA">defaultOutputTokenAddress</span><span style="color: #89DDFF">={</span><span style="color: #A6ACCD">UNI</span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">      /&gt;</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">main</span><span style="color: #89DDFF">&gt;</span></span>
<span class="line"><span style="color: #F07178">  )</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span></code></pre>`}}),ns=new K({props:{class:"header-anchor",href:"#step-5-wrap-the-context-provider","aria-hidden":"true",$$slots:{default:[be]},$$scope:{ctx:C}}}),ws=new k({props:{code:"web3-onboard"}}),hs=new k({props:{code:"web3-onboard"}}),$s=new Ps({props:{title:"index.tsx",lang:"javascript",ext:"js",linesCount:19,highlightLines:[[8,9],[13,15]],rawCode:`import React from 'react'
import ReactDOM from 'react-dom'
import { Web3OnboardProvider } from '@web3-onboard/react'

import './index.css'
import App from './App.tsx'

// Import the web3-onboard singleton
import web3Onboard from './web3-onboard'

ReactDOM.render(
  <React.StrictMode>
    <Web3OnboardProvider web3Onboard={web3Onboard}>
      <App />
    </Web3OnboardProvider>
  </React.StrictMode>,
  document.getElementById('root')
)
`,showCopyCode:!0,code:`<pre><code><span class="line"><span style="color: #89DDFF; font-style: italic">import</span><span style="color: #A6ACCD"> React </span><span style="color: #89DDFF; font-style: italic">from</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">react</span><span style="color: #89DDFF">&#39;</span></span>
<span class="line"><span style="color: #89DDFF; font-style: italic">import</span><span style="color: #A6ACCD"> ReactDOM </span><span style="color: #89DDFF; font-style: italic">from</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">react-dom</span><span style="color: #89DDFF">&#39;</span></span>
<span class="line"><span style="color: #89DDFF; font-style: italic">import</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">Web3OnboardProvider</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">from</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">@web3-onboard/react</span><span style="color: #89DDFF">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF; font-style: italic">import</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">./index.css</span><span style="color: #89DDFF">&#39;</span></span>
<span class="line"><span style="color: #89DDFF; font-style: italic">import</span><span style="color: #A6ACCD"> App </span><span style="color: #89DDFF; font-style: italic">from</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">./App.tsx</span><span style="color: #89DDFF">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #464B5D; font-style: italic">// Import the web3-onboard singleton</span></span>
<span class="line"><span style="color: #89DDFF; font-style: italic">import</span><span style="color: #A6ACCD"> web3Onboard </span><span style="color: #89DDFF; font-style: italic">from</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">./web3-onboard</span><span style="color: #89DDFF">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">ReactDOM</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">render</span><span style="color: #A6ACCD">(</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">&lt;</span><span style="color: #FFCB6B">React.StrictMode</span><span style="color: #89DDFF">&gt;</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #FFCB6B">Web3OnboardProvider</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">web3Onboard</span><span style="color: #89DDFF">={</span><span style="color: #A6ACCD">web3Onboard</span><span style="color: #89DDFF">}&gt;</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #89DDFF">&lt;</span><span style="color: #FFCB6B">App</span><span style="color: #89DDFF"> /&gt;</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #89DDFF">&lt;/</span><span style="color: #FFCB6B">Web3OnboardProvider</span><span style="color: #89DDFF">&gt;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">&lt;/</span><span style="color: #FFCB6B">React.StrictMode</span><span style="color: #89DDFF">&gt;,</span></span>
<span class="line"><span style="color: #A6ACCD">  document</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getElementById</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">root</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">)</span></span>
<span class="line"></span></code></pre>`}}),es=new K({props:{class:"header-anchor",href:"#see-in-action","aria-hidden":"true",$$slots:{default:[ge]},$$scope:{ctx:C}}}),as=new K({props:{class:"header-anchor",href:"#live-example-\u{1F680}","aria-hidden":"true",$$slots:{default:[ve]},$$scope:{ctx:C}}}),{c(){n=A("h1"),a=p("Uniswap Widget Example"),t=h(),v=A("p"),m=p("This example will walk you through how to integrate "),i(E.$$.fragment),gs=p(" with the "),i(x.$$.fragment),cn=p("! Add this web3-onboard enabled uniswap widget to your site to provide users with token swap capabilities quickly."),Ns=h(),O=A("h2"),i(J.$$.fragment),Dn=p(" Step 1: Install"),Hs=h(),vs=A("p"),Fn=p("To start, we'll install the widgets library and the web3-onboard react library using npm or Yarn."),qs=h(),i(V.$$.fragment),Ys=h(),R=A("h2"),i(G.$$.fragment),yn=p(" Step 2: Import + Configure"),zs=h(),Es=A("p"),dn=p("Import the libraries and any wallets you would like to use. For this example, we are going to use the injected wallets module. You can easily add more wallet support to your dapp via our other wallet modules. Additionally, we'll setup web3-onboard to support 2 chains: Ethereum mainnet and Polygon mainnet."),Ks=h(),B=A("p"),fn=p("We'll create a file called "),i(ls.$$.fragment),Cn=p(" and then export the initialized "),i(os.$$.fragment),An=p(" instance and use this throughout our dapp."),Js=h(),i(ts.$$.fragment),M=A("h2"),i(Q.$$.fragment),un=p(" Step 3: Add the react hooks"),Vs=h(),T=A("p"),mn=p("In our main "),i(ps.$$.fragment),wn=p(" component we'll setup our Web3-Onboard react hooks. For this example we'll be using the "),i(rs.$$.fragment),hn=p(" react hook. This will give us access to the currently connected wallets, as well as, methods for us to facilitate connecting and disconnecting a wallet."),Gs=h(),i(cs.$$.fragment),j=A("h2"),i(X.$$.fragment),$n=p(" Step 4: Add the Uniswap widget"),Qs=h(),Z=A("p"),bn=p("To begin, we'll import the "),i(is.$$.fragment),gn=p(" along with the corresponding fonts. We'll define a few constants that will be passed to the swap widget:"),Xs=h(),U=A("ul"),Os=A("li"),vn=p("The json rpc endpoint that will be used to provide trade quotes prior to the user connecting a wallet"),En=h(),Rs=A("li"),_n=p("The token list url used to provide a list of tokens for the user to select from"),kn=h(),Ms=A("li"),xn=p("The Uniswap token address which will be used as the default selected token"),Zs=h(),I=A("p"),Wn=p("To learn more about all of the "),i(Ds.$$.fragment),Sn=p(" props, check out "),i(ss.$$.fragment),Bn=p("."),sn=h(),g=A("p"),Tn=p("We will take the "),i(Fs.$$.fragment),Un=p(" function that we previously defined and pass it to the "),i(ys.$$.fragment),In=p(" prop on the "),i(ds.$$.fragment),Pn=p(". This will allow us to initiate the web3-onboard connect wallet modal once the user clicks the on the connect wallet button within the "),i(fs.$$.fragment),On=p(". Finally, we'll also pass the "),i(Cs.$$.fragment),Rn=p(" to the SwapWidget such that once the "),i(As.$$.fragment),Mn=p(" is defined, the "),i(us.$$.fragment),jn=p(" will be able to use the wallet's provider to facilitate the swap."),nn=h(),i(ms.$$.fragment),L=A("h2"),i(ns.$$.fragment),Ln=p(" Step 5: Wrap the context provider"),en=h(),P=A("p"),Nn=p("Finally, we'll wrap our main App component with the "),i(ws.$$.fragment),Hn=p(" context provider in order for us to access the "),i(hs.$$.fragment),qn=p(" instance throughout our app."),an=h(),i($s.$$.fragment),N=A("h2"),i(es.$$.fragment),Yn=p(" See in action!"),ln=h(),W=A("video"),_s=A("source"),zn=p(`
  Your browser does not support the video tag.`),on=h(),H=A("h2"),i(as.$$.fragment),Kn=p(" Live Example \u{1F680}"),tn=h(),ks=A("p"),Jn=p("Check out the live example on StackBlitz! StackBlitz will install and build the package in the below container"),pn=h(),S=A("iframe"),this.h()},l(s){n=u(s,"H1",{});var l=w(n);a=r(l,"Uniswap Widget Example"),l.forEach(e),t=$(s),v=u(s,"P",{});var q=w(v);m=r(q,"This example will walk you through how to integrate "),D(E.$$.fragment,q),gs=r(q," with the "),D(x.$$.fragment,q),cn=r(q,"! Add this web3-onboard enabled uniswap widget to your site to provide users with token swap capabilities quickly."),q.forEach(e),Ns=$(s),O=u(s,"H2",{id:!0,tabindex:!0});var xs=w(O);D(J.$$.fragment,xs),Dn=r(xs," Step 1: Install"),xs.forEach(e),Hs=$(s),vs=u(s,"P",{});var js=w(vs);Fn=r(js,"To start, we'll install the widgets library and the web3-onboard react library using npm or Yarn."),js.forEach(e),qs=$(s),D(V.$$.fragment,s),Ys=$(s),R=u(s,"H2",{id:!0,tabindex:!0});var Ws=w(R);D(G.$$.fragment,Ws),yn=r(Ws," Step 2: Import + Configure"),Ws.forEach(e),zs=$(s),Es=u(s,"P",{});var Ls=w(Es);dn=r(Ls,"Import the libraries and any wallets you would like to use. For this example, we are going to use the injected wallets module. You can easily add more wallet support to your dapp via our other wallet modules. Additionally, we'll setup web3-onboard to support 2 chains: Ethereum mainnet and Polygon mainnet."),Ls.forEach(e),Ks=$(s),B=u(s,"P",{});var Y=w(B);fn=r(Y,"We'll create a file called "),D(ls.$$.fragment,Y),Cn=r(Y," and then export the initialized "),D(os.$$.fragment,Y),An=r(Y," instance and use this throughout our dapp."),Y.forEach(e),Js=$(s),D(ts.$$.fragment,s),M=u(s,"H2",{id:!0,tabindex:!0});var Ss=w(M);D(Q.$$.fragment,Ss),un=r(Ss," Step 3: Add the react hooks"),Ss.forEach(e),Vs=$(s),T=u(s,"P",{});var z=w(T);mn=r(z,"In our main "),D(ps.$$.fragment,z),wn=r(z," component we'll setup our Web3-Onboard react hooks. For this example we'll be using the "),D(rs.$$.fragment,z),hn=r(z," react hook. This will give us access to the currently connected wallets, as well as, methods for us to facilitate connecting and disconnecting a wallet."),z.forEach(e),Gs=$(s),D(cs.$$.fragment,s),j=u(s,"H2",{id:!0,tabindex:!0});var Bs=w(j);D(X.$$.fragment,Bs),$n=r(Bs," Step 4: Add the Uniswap widget"),Bs.forEach(e),Qs=$(s),Z=u(s,"P",{});var bs=w(Z);bn=r(bs,"To begin, we'll import the "),D(is.$$.fragment,bs),gn=r(bs," along with the corresponding fonts. We'll define a few constants that will be passed to the swap widget:"),bs.forEach(e),Xs=$(s),U=u(s,"UL",{});var Ts=w(U);Os=u(Ts,"LI",{});var ne=w(Os);vn=r(ne,"The json rpc endpoint that will be used to provide trade quotes prior to the user connecting a wallet"),ne.forEach(e),En=$(Ts),Rs=u(Ts,"LI",{});var ee=w(Rs);_n=r(ee,"The token list url used to provide a list of tokens for the user to select from"),ee.forEach(e),kn=$(Ts),Ms=u(Ts,"LI",{});var ae=w(Ms);xn=r(ae,"The Uniswap token address which will be used as the default selected token"),ae.forEach(e),Ts.forEach(e),Zs=$(s),I=u(s,"P",{});var Us=w(I);Wn=r(Us,"To learn more about all of the "),D(Ds.$$.fragment,Us),Sn=r(Us," props, check out "),D(ss.$$.fragment,Us),Bn=r(Us,"."),Us.forEach(e),sn=$(s),g=u(s,"P",{});var _=w(g);Tn=r(_,"We will take the "),D(Fs.$$.fragment,_),Un=r(_," function that we previously defined and pass it to the "),D(ys.$$.fragment,_),In=r(_," prop on the "),D(ds.$$.fragment,_),Pn=r(_,". This will allow us to initiate the web3-onboard connect wallet modal once the user clicks the on the connect wallet button within the "),D(fs.$$.fragment,_),On=r(_,". Finally, we'll also pass the "),D(Cs.$$.fragment,_),Rn=r(_," to the SwapWidget such that once the "),D(As.$$.fragment,_),Mn=r(_," is defined, the "),D(us.$$.fragment,_),jn=r(_," will be able to use the wallet's provider to facilitate the swap."),_.forEach(e),nn=$(s),D(ms.$$.fragment,s),L=u(s,"H2",{id:!0,tabindex:!0});var Vn=w(L);D(ns.$$.fragment,Vn),Ln=r(Vn," Step 5: Wrap the context provider"),Vn.forEach(e),en=$(s),P=u(s,"P",{});var Is=w(P);Nn=r(Is,"Finally, we'll wrap our main App component with the "),D(ws.$$.fragment,Is),Hn=r(Is," context provider in order for us to access the "),D(hs.$$.fragment,Is),qn=r(Is," instance throughout our app."),Is.forEach(e),an=$(s),D($s.$$.fragment,s),N=u(s,"H2",{id:!0,tabindex:!0});var Gn=w(N);D(es.$$.fragment,Gn),Yn=r(Gn," See in action!"),Gn.forEach(e),ln=$(s),W=u(s,"VIDEO",{width:!0,height:!0,style:!0});var Qn=w(W);_s=u(Qn,"SOURCE",{src:!0,type:!0}),zn=r(Qn,`
  Your browser does not support the video tag.`),Qn.forEach(e),on=$(s),H=u(s,"H2",{id:!0,tabindex:!0});var Xn=w(H);D(as.$$.fragment,Xn),Kn=r(Xn," Live Example \u{1F680}"),Xn.forEach(e),tn=$(s),ks=u(s,"P",{});var le=w(ks);Jn=r(le,"Check out the live example on StackBlitz! StackBlitz will install and build the package in the below container"),le.forEach(e),pn=$(s),S=u(s,"IFRAME",{title:!0,src:!0,width:!0,height:!0,style:!0}),w(S).forEach(e),this.h()},h(){b(O,"id","step-1-install"),b(O,"tabindex","-1"),b(R,"id","step-2-import-configure"),b(R,"tabindex","-1"),b(M,"id","step-3-add-the-react-hooks"),b(M,"tabindex","-1"),b(j,"id","step-4-add-the-uniswap-widget"),b(j,"tabindex","-1"),b(L,"id","step-5-wrap-the-context-provider"),b(L,"tabindex","-1"),b(N,"id","see-in-action"),b(N,"tabindex","-1"),oe(_s.src,Zn=ye)||b(_s,"src",Zn),b(_s,"type","video/mp4"),b(W,"width","100%"),b(W,"height","240"),te(W,"border-radius","0.375rem"),W.controls=!0,b(H,"id","live-example-\u{1F680}"),b(H,"tabindex","-1"),b(S,"title","Uniswap + Web3-Onboard"),oe(S.src,se="https://stackblitz.com/edit/node-avakex?ctl=1&embed=1&hideExplorer=1&hideNavigation=1&view=preview")||b(S,"src",se),b(S,"width","100%"),b(S,"height","500px"),te(S,"border-radius","0.375rem")},m(s,l){o(s,n,l),c(n,a),o(s,t,l),o(s,v,l),c(v,m),F(E,v,null),c(v,gs),F(x,v,null),c(v,cn),o(s,Ns,l),o(s,O,l),F(J,O,null),c(O,Dn),o(s,Hs,l),o(s,vs,l),c(vs,Fn),o(s,qs,l),F(V,s,l),o(s,Ys,l),o(s,R,l),F(G,R,null),c(R,yn),o(s,zs,l),o(s,Es,l),c(Es,dn),o(s,Ks,l),o(s,B,l),c(B,fn),F(ls,B,null),c(B,Cn),F(os,B,null),c(B,An),o(s,Js,l),F(ts,s,l),o(s,M,l),F(Q,M,null),c(M,un),o(s,Vs,l),o(s,T,l),c(T,mn),F(ps,T,null),c(T,wn),F(rs,T,null),c(T,hn),o(s,Gs,l),F(cs,s,l),o(s,j,l),F(X,j,null),c(j,$n),o(s,Qs,l),o(s,Z,l),c(Z,bn),F(is,Z,null),c(Z,gn),o(s,Xs,l),o(s,U,l),c(U,Os),c(Os,vn),c(U,En),c(U,Rs),c(Rs,_n),c(U,kn),c(U,Ms),c(Ms,xn),o(s,Zs,l),o(s,I,l),c(I,Wn),F(Ds,I,null),c(I,Sn),F(ss,I,null),c(I,Bn),o(s,sn,l),o(s,g,l),c(g,Tn),F(Fs,g,null),c(g,Un),F(ys,g,null),c(g,In),F(ds,g,null),c(g,Pn),F(fs,g,null),c(g,On),F(Cs,g,null),c(g,Rn),F(As,g,null),c(g,Mn),F(us,g,null),c(g,jn),o(s,nn,l),F(ms,s,l),o(s,L,l),F(ns,L,null),c(L,Ln),o(s,en,l),o(s,P,l),c(P,Nn),F(ws,P,null),c(P,Hn),F(hs,P,null),c(P,qn),o(s,an,l),F($s,s,l),o(s,N,l),F(es,N,null),c(N,Yn),o(s,ln,l),o(s,W,l),c(W,_s),c(W,zn),o(s,on,l),o(s,H,l),F(as,H,null),c(H,Kn),o(s,tn,l),o(s,ks,l),c(ks,Jn),o(s,pn,l),o(s,S,l),rn=!0},p(s,[l]){const q={};l&2&&(q.$$scope={dirty:l,ctx:s}),x.$set(q);const xs={};l&2&&(xs.$$scope={dirty:l,ctx:s}),J.$set(xs);const js={};l&2&&(js.$$scope={dirty:l,ctx:s}),V.$set(js);const Ws={};l&2&&(Ws.$$scope={dirty:l,ctx:s}),G.$set(Ws);const Ls={};l&2&&(Ls.$$scope={dirty:l,ctx:s}),Q.$set(Ls);const Y={};l&2&&(Y.$$scope={dirty:l,ctx:s}),X.$set(Y);const Ss={};l&2&&(Ss.$$scope={dirty:l,ctx:s}),ss.$set(Ss);const z={};l&2&&(z.$$scope={dirty:l,ctx:s}),ns.$set(z);const Bs={};l&2&&(Bs.$$scope={dirty:l,ctx:s}),es.$set(Bs);const bs={};l&2&&(bs.$$scope={dirty:l,ctx:s}),as.$set(bs)},i(s){rn||(y(E.$$.fragment,s),y(x.$$.fragment,s),y(J.$$.fragment,s),y(V.$$.fragment,s),y(G.$$.fragment,s),y(ls.$$.fragment,s),y(os.$$.fragment,s),y(ts.$$.fragment,s),y(Q.$$.fragment,s),y(ps.$$.fragment,s),y(rs.$$.fragment,s),y(cs.$$.fragment,s),y(X.$$.fragment,s),y(is.$$.fragment,s),y(Ds.$$.fragment,s),y(ss.$$.fragment,s),y(Fs.$$.fragment,s),y(ys.$$.fragment,s),y(ds.$$.fragment,s),y(fs.$$.fragment,s),y(Cs.$$.fragment,s),y(As.$$.fragment,s),y(us.$$.fragment,s),y(ms.$$.fragment,s),y(ns.$$.fragment,s),y(ws.$$.fragment,s),y(hs.$$.fragment,s),y($s.$$.fragment,s),y(es.$$.fragment,s),y(as.$$.fragment,s),rn=!0)},o(s){d(E.$$.fragment,s),d(x.$$.fragment,s),d(J.$$.fragment,s),d(V.$$.fragment,s),d(G.$$.fragment,s),d(ls.$$.fragment,s),d(os.$$.fragment,s),d(ts.$$.fragment,s),d(Q.$$.fragment,s),d(ps.$$.fragment,s),d(rs.$$.fragment,s),d(cs.$$.fragment,s),d(X.$$.fragment,s),d(is.$$.fragment,s),d(Ds.$$.fragment,s),d(ss.$$.fragment,s),d(Fs.$$.fragment,s),d(ys.$$.fragment,s),d(ds.$$.fragment,s),d(fs.$$.fragment,s),d(Cs.$$.fragment,s),d(As.$$.fragment,s),d(us.$$.fragment,s),d(ms.$$.fragment,s),d(ns.$$.fragment,s),d(ws.$$.fragment,s),d(hs.$$.fragment,s),d($s.$$.fragment,s),d(es.$$.fragment,s),d(as.$$.fragment,s),rn=!1},d(s){s&&e(n),s&&e(t),s&&e(v),f(E),f(x),s&&e(Ns),s&&e(O),f(J),s&&e(Hs),s&&e(vs),s&&e(qs),f(V,s),s&&e(Ys),s&&e(R),f(G),s&&e(zs),s&&e(Es),s&&e(Ks),s&&e(B),f(ls),f(os),s&&e(Js),f(ts,s),s&&e(M),f(Q),s&&e(Vs),s&&e(T),f(ps),f(rs),s&&e(Gs),f(cs,s),s&&e(j),f(X),s&&e(Qs),s&&e(Z),f(is),s&&e(Xs),s&&e(U),s&&e(Zs),s&&e(I),f(Ds),f(ss),s&&e(sn),s&&e(g),f(Fs),f(ys),f(ds),f(fs),f(Cs),f(As),f(us),s&&e(nn),f(ms,s),s&&e(L),f(ns),s&&e(en),s&&e(P),f(ws),f(hs),s&&e(an),f($s,s),s&&e(N),f(es),s&&e(ln),s&&e(W),s&&e(on),s&&e(H),f(as),s&&e(tn),s&&e(ks),s&&e(pn),s&&e(S)}}}function _e(C){return[["yarn","npm"]]}class Le extends ce{constructor(n){super(),ie(this,n,_e,Ee,De,{})}}export{Le as default};
