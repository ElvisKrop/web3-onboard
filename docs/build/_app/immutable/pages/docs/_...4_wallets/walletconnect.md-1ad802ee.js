import{S as ts,i as ps,s as rs,e as H,t as u,k as x,w as y,c as I,a as q,h as m,d as o,m as O,x as f,b as k,g as p,M as R,y as $,q as C,o as F,B as A,E as os}from"../../../chunks/index-4af071d0.js";import"../../../chunks/scroll-9ce8c56b.js";import{C as X}from"../../../chunks/CodeFence-7c02fe57.js";import{L as V}from"../../../chunks/Link-5aa5b43b.js";/* empty css                                                            */import{T as cs,a as ls}from"../../../chunks/Tabs-6a4561b3.js";import"../../../chunks/singletons-13ae2ec1.js";import"../../../chunks/contexts-e4ffdb2f.js";function is(r){let n;return{c(){n=u("#")},l(a){n=m(a,"#")},m(a,e){p(a,n,e)},d(a){a&&o(n)}}}function Ds(r){let n,a;return n=new X({props:{lang:"bash",ext:"sh",linesCount:2,rawCode:`yarn add @web3-onboard/walletconnect
`,showCopyCode:!0,code:`<pre><code><span class="line"><span style="color: #A6ACCD">yarn add @web3-onboard/walletconnect</span></span>
<span class="line"></span></code></pre>`}}),{c(){y(n.$$.fragment)},l(e){f(n.$$.fragment,e)},m(e,c){$(n,e,c),a=!0},p:os,i(e){a||(C(n.$$.fragment,e),a=!0)},o(e){F(n.$$.fragment,e),a=!1},d(e){A(n,e)}}}function ys(r){let n,a;return n=new X({props:{lang:"bash",ext:"sh",linesCount:2,rawCode:`npm install @web3-onboard/walletconnect
`,showCopyCode:!0,code:`<pre><code><span class="line"><span style="color: #A6ACCD">npm install @web3-onboard/walletconnect</span></span>
<span class="line"></span></code></pre>`}}),{c(){y(n.$$.fragment)},l(e){f(n.$$.fragment,e)},m(e,c){$(n,e,c),a=!0},p:os,i(e){a||(C(n.$$.fragment,e),a=!0)},o(e){F(n.$$.fragment,e),a=!1},d(e){A(n,e)}}}function fs(r){let n,a,e,c;return n=new ls({props:{value:"yarn",$$slots:{default:[Ds]},$$scope:{ctx:r}}}),e=new ls({props:{value:"npm",$$slots:{default:[ys]},$$scope:{ctx:r}}}),{c(){y(n.$$.fragment),a=x(),y(e.$$.fragment)},l(t){f(n.$$.fragment,t),a=O(t),f(e.$$.fragment,t)},m(t,i){$(n,t,i),p(t,a,i),$(e,t,i),c=!0},p(t,i){const D={};i&1&&(D.$$scope={dirty:i,ctx:t}),n.$set(D);const d={};i&1&&(d.$$scope={dirty:i,ctx:t}),e.$set(d)},i(t){c||(C(n.$$.fragment,t),C(e.$$.fragment,t),c=!0)},o(t){F(n.$$.fragment,t),F(e.$$.fragment,t),c=!1},d(t){A(n,t),t&&o(a),A(e,t)}}}function $s(r){let n;return{c(){n=u("#")},l(a){n=m(a,"#")},m(a,e){p(a,n,e)},d(a){a&&o(n)}}}function Cs(r){let n;return{c(){n=u("#")},l(a){n=m(a,"#")},m(a,e){p(a,n,e)},d(a){a&&o(n)}}}function Fs(r){let n;return{c(){n=u("#")},l(a){n=m(a,"#")},m(a,e){p(a,n,e)},d(a){a&&o(n)}}}function As(r){let n;return{c(){n=u("here")},l(a){n=m(a,"here")},m(a,e){p(a,n,e)},d(a){a&&o(n)}}}function us(r){let n,a,e,c,t,i,D,d,Z,Y,g,j,_,h,ss,J,W,b,E,ns,K,M,w,B,as,N,L,es,v,Q;return d=new V({props:{class:"header-anchor",href:"#install","aria-hidden":"true",$$slots:{default:[is]},$$scope:{ctx:r}}}),g=new cs({props:{values:["yarn","npm"],$$slots:{default:[fs]},$$scope:{ctx:r}}}),h=new V({props:{class:"header-anchor",href:"#options","aria-hidden":"true",$$slots:{default:[$s]},$$scope:{ctx:r}}}),W=new X({props:{lang:"typescript",ext:"ts",linesCount:8,code:`<pre><code><span class="line"><span style="color: #C792EA">type</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">WalletConnectOptions</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">bridge</span><span style="color: #89DDFF">?:</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">string</span><span style="color: #A6ACCD"> </span><span style="color: #464B5D; font-style: italic">// default = &#39;https://bridge.walletconnect.org&#39;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">qrcodeModalOptions</span><span style="color: #89DDFF">?:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #F07178">mobileLinks</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">string</span><span style="color: #A6ACCD">[] </span><span style="color: #464B5D; font-style: italic">// set the order and list of mobile linking wallets</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">connectFirstChainId</span><span style="color: #89DDFF">?:</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">boolean</span><span style="color: #A6ACCD"> </span><span style="color: #464B5D; font-style: italic">// if true, connects to the first network chain provided</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span></code></pre>`}}),E=new V({props:{class:"header-anchor",href:"#usage","aria-hidden":"true",$$slots:{default:[Cs]},$$scope:{ctx:r}}}),M=new X({props:{lang:"typescript",ext:"ts",linesCount:26,code:`<pre><code><span class="line"><span style="color: #89DDFF; font-style: italic">import</span><span style="color: #A6ACCD"> Onboard </span><span style="color: #89DDFF; font-style: italic">from</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">@web3-onboard/core</span><span style="color: #89DDFF">&#39;</span></span>
<span class="line"><span style="color: #89DDFF; font-style: italic">import</span><span style="color: #A6ACCD"> walletConnectModule </span><span style="color: #89DDFF; font-style: italic">from</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">@web3-onboard/walletconnect</span><span style="color: #89DDFF">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #464B5D; font-style: italic">// initialize the module with options</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> walletConnect </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">walletConnectModule</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">bridge</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">YOUR_CUSTOM_BRIDGE_SERVER</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">qrcodeModalOptions</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #F07178">mobileLinks</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> [</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">rainbow</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">metamask</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">argent</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">trust</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">imtoken</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">pillar</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD">]</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">},</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">connectFirstChainId</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">true</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #464B5D; font-style: italic">// can also initialize with no options...</span></span>
<span class="line"><span style="color: #464B5D; font-style: italic">// const walletConnect = walletConnectModule()</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> onboard </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">Onboard</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #464B5D; font-style: italic">// ... other Onboard options</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">wallets</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> [</span></span>
<span class="line"><span style="color: #A6ACCD">    walletConnect</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #464B5D; font-style: italic">//... other wallets</span></span>
<span class="line"><span style="color: #A6ACCD">  ]</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> connectedWallets </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">await</span><span style="color: #A6ACCD"> onboard</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">connectWallet</span><span style="color: #A6ACCD">()</span></span>
<span class="line"><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #A6ACCD">(connectedWallets)</span></span>
<span class="line"></span></code></pre>`}}),B=new V({props:{class:"header-anchor",href:"#build-environments","aria-hidden":"true",$$slots:{default:[Fs]},$$scope:{ctx:r}}}),v=new V({props:{href:"/docs/modules/core#build-environments",$$slots:{default:[As]},$$scope:{ctx:r}}}),{c(){n=H("h1"),a=u("Walletconnect"),e=x(),c=H("p"),t=u("Wallet module for connecting Ledger hardware wallets to web3-onboard"),i=x(),D=H("h2"),y(d.$$.fragment),Z=u(" Install"),Y=x(),y(g.$$.fragment),j=x(),_=H("h2"),y(h.$$.fragment),ss=u(" Options"),J=x(),y(W.$$.fragment),b=H("h2"),y(E.$$.fragment),ns=u(" Usage"),K=x(),y(M.$$.fragment),w=H("h2"),y(B.$$.fragment),as=u(" Build Environments"),N=x(),L=H("p"),es=u("For build env configurations and setups please see the Build Env section "),y(v.$$.fragment),this.h()},l(s){n=I(s,"H1",{});var l=q(n);a=m(l,"Walletconnect"),l.forEach(o),e=O(s),c=I(s,"P",{});var G=q(c);t=m(G,"Wallet module for connecting Ledger hardware wallets to web3-onboard"),G.forEach(o),i=O(s),D=I(s,"H2",{id:!0,tabindex:!0});var S=q(D);f(d.$$.fragment,S),Z=m(S," Install"),S.forEach(o),Y=O(s),f(g.$$.fragment,s),j=O(s),_=I(s,"H2",{id:!0,tabindex:!0});var T=q(_);f(h.$$.fragment,T),ss=m(T," Options"),T.forEach(o),J=O(s),f(W.$$.fragment,s),b=I(s,"H2",{id:!0,tabindex:!0});var U=q(b);f(E.$$.fragment,U),ns=m(U," Usage"),U.forEach(o),K=O(s),f(M.$$.fragment,s),w=I(s,"H2",{id:!0,tabindex:!0});var P=q(w);f(B.$$.fragment,P),as=m(P," Build Environments"),P.forEach(o),N=O(s),L=I(s,"P",{});var z=q(L);es=m(z,"For build env configurations and setups please see the Build Env section "),f(v.$$.fragment,z),z.forEach(o),this.h()},h(){k(D,"id","install"),k(D,"tabindex","-1"),k(_,"id","options"),k(_,"tabindex","-1"),k(b,"id","usage"),k(b,"tabindex","-1"),k(w,"id","build-environments"),k(w,"tabindex","-1")},m(s,l){p(s,n,l),R(n,a),p(s,e,l),p(s,c,l),R(c,t),p(s,i,l),p(s,D,l),$(d,D,null),R(D,Z),p(s,Y,l),$(g,s,l),p(s,j,l),p(s,_,l),$(h,_,null),R(_,ss),p(s,J,l),$(W,s,l),p(s,b,l),$(E,b,null),R(b,ns),p(s,K,l),$(M,s,l),p(s,w,l),$(B,w,null),R(w,as),p(s,N,l),p(s,L,l),R(L,es),$(v,L,null),Q=!0},p(s,[l]){const G={};l&1&&(G.$$scope={dirty:l,ctx:s}),d.$set(G);const S={};l&1&&(S.$$scope={dirty:l,ctx:s}),g.$set(S);const T={};l&1&&(T.$$scope={dirty:l,ctx:s}),h.$set(T);const U={};l&1&&(U.$$scope={dirty:l,ctx:s}),E.$set(U);const P={};l&1&&(P.$$scope={dirty:l,ctx:s}),B.$set(P);const z={};l&1&&(z.$$scope={dirty:l,ctx:s}),v.$set(z)},i(s){Q||(C(d.$$.fragment,s),C(g.$$.fragment,s),C(h.$$.fragment,s),C(W.$$.fragment,s),C(E.$$.fragment,s),C(M.$$.fragment,s),C(B.$$.fragment,s),C(v.$$.fragment,s),Q=!0)},o(s){F(d.$$.fragment,s),F(g.$$.fragment,s),F(h.$$.fragment,s),F(W.$$.fragment,s),F(E.$$.fragment,s),F(M.$$.fragment,s),F(B.$$.fragment,s),F(v.$$.fragment,s),Q=!1},d(s){s&&o(n),s&&o(e),s&&o(c),s&&o(i),s&&o(D),A(d),s&&o(Y),A(g,s),s&&o(j),s&&o(_),A(h),s&&o(J),A(W,s),s&&o(b),A(E),s&&o(K),A(M,s),s&&o(w),A(B),s&&o(N),s&&o(L),A(v)}}}class Bs extends ts{constructor(n){super(),ps(this,n,null,us,rs,{})}}export{Bs as default};
